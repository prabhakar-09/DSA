What does it mean by "Not a thread safe method"?

Thread Safety:

Thread safety refers to the property of a program or object that ensures safe and correct 
behavior when accessed by multiple threads concurrently.

In a multi-threaded environment, where multiple threads of execution can access and modify
shared resources simultaneously, ensuring thread safety is crucial to prevent data corruption, 
race conditions, and other concurrency-related issues.

Not Thread Safe:

If a data structure, object, or piece of code is not thread-safe, 
it means that it is not designed to handle concurrent access from multiple threads in a safe manner.

In a not thread-safe scenario, simultaneous access and modification of shared resources by multiple 
threads can lead to unpredictable behavior, data corruption, and application crashes.

Thread Safety Measures:

Making an object or data structure thread-safe typically involves employing 
synchronization mechanisms, such as locks, mutexes, semaphores, or atomic operations, 
to ensure that only one thread can access or modify the shared resource at a time.

By synchronizing access to critical sections of code or shared data, thread safety 
can be enforced, preventing race conditions and maintaining the integrity of the data.

Concurrent Access:

In a multi-threaded environment, multiple threads may attempt to read from or 
write to shared resources concurrently.

Thread-safe data structures or objects are designed to handle concurrent access 
gracefully, ensuring that operations are performed in a consistent and predictable manner, 
regardless of the timing or order of thread execution.

What is concurrency?

Concurrency refers to the ability of a computer system to execute multiple tasks or processes 
simultaneously, or at least appear to be executing them simultaneously. Concurrency is a 
fundamental concept in computer science and is prevalent in modern computing environments.